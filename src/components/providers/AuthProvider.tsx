'use client'

import { createContext, useContext, useEffect, useState } from 'react'
import { User } from '@/types/auth'
import { supabase, isSupabaseAvailable } from '@/lib/supabase'
import { useGame } from '@/contexts/GameContext'

interface AuthContextType {
  user: User | null
  isLoading: boolean
  isAuthenticated: boolean
  login: (guestName: string, schoolName: string) => Promise<void>
  logout: () => void
  authMethod: 'supabase' | 'local'
}

const AuthContext = createContext<AuthContextType | undefined>(undefined)

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [user, setUser] = useState<User | null>(null)
  const [isLoading, setIsLoading] = useState(true)
  const [authMethod, setAuthMethod] = useState<'supabase' | 'local'>('local')
  
  // GameContext„Åã„ÇâË™çË®ºÁä∂ÊÖã„ÇíÂèñÂæó
  const { state: gameState, actions: gameActions } = useGame()

  useEffect(() => {
    // ÂàùÊúüÂåñÊôÇ„Å´„É≠„Éº„Ç´„É´„Çπ„Éà„É¨„Éº„Ç∏„Åã„ÇâË™çË®ºÊÉÖÂ†±„ÇíÂæ©ÂÖÉ
    const initializeAuth = async () => {
      console.log('üîê AuthProvider: ÂàùÊúüÂåñÈñãÂßã')
      
      // Âè§„ÅÑ„Çª„ÉÉ„Ç∑„Éß„É≥ÊÉÖÂ†±„Çí„ÇØ„É™„Ç¢
      try {
        localStorage.removeItem('tokiwa_user')
        localStorage.removeItem('tokiwa-session-state')
        sessionStorage.clear()
        console.log('üîê AuthProvider: Âè§„ÅÑ„Çª„ÉÉ„Ç∑„Éß„É≥ÊÉÖÂ†±„Çí„ÇØ„É™„Ç¢„Åó„Åæ„Åó„Åü')
      } catch (error) {
        console.warn('üîê AuthProvider: „Çª„ÉÉ„Ç∑„Éß„É≥„ÇØ„É™„Ç¢‰∏≠„Å´„Ç®„É©„Éº:', error)
      }
      
      // Supabase„ÅÆÂà©Áî®ÂèØËÉΩÊÄß„Çí„ÉÅ„Çß„ÉÉ„ÇØ
      const supabaseAvailable = isSupabaseAvailable()
      console.log('üîê AuthProvider: SupabaseÂà©Áî®ÂèØËÉΩ:', supabaseAvailable)
      
      if (supabaseAvailable) {
        setAuthMethod('supabase')
        try {
          console.log('üîê AuthProvider: Supabase„Çª„ÉÉ„Ç∑„Éß„É≥„ÇíÁ¢∫Ë™ç‰∏≠...')
          if (supabase) {
            // Supabase„ÅÆ„Çª„ÉÉ„Ç∑„Éß„É≥„ÇÇ„ÇØ„É™„Ç¢
            await supabase.auth.signOut()
            console.log('üîê AuthProvider: Supabase„Çª„ÉÉ„Ç∑„Éß„É≥„Çí„ÇØ„É™„Ç¢„Åó„Åæ„Åó„Åü')
            
            const { data: { session }, error } = await supabase.auth.getSession()
            
            if (error) {
              console.error('üîê AuthProvider: Supabase„Çª„ÉÉ„Ç∑„Éß„É≥ÂèñÂæó„Ç®„É©„Éº:', error)
              // „Ç®„É©„Éº„ÅÆÂ†¥Âêà„ÅØ„É≠„Éº„Ç´„É´Ë™çË®º„Å´„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ
              setAuthMethod('local')
            } else if (session) {
              console.log('üîê AuthProvider: Supabase„Çª„ÉÉ„Ç∑„Éß„É≥Áô∫Ë¶ã:', session)
              // Supabase„Çª„ÉÉ„Ç∑„Éß„É≥„Åã„Çâ„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„ÇíÂèñÂæó
              // „Åì„Åì„Åß„Éá„Éº„Çø„Éô„Éº„Çπ„Åã„Çâ„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„ÇíÂèñÂæó„Åô„ÇãÂá¶ÁêÜ„ÇíËøΩÂä†
            } else {
              console.log('üîê AuthProvider: Supabase„Çª„ÉÉ„Ç∑„Éß„É≥„Å™„Åó')
              // „Çª„ÉÉ„Ç∑„Éß„É≥„Åå„Å™„ÅÑÂ†¥Âêà„ÅØ„É≠„Éº„Ç´„É´Ë™çË®º„Å´„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ
              setAuthMethod('local')
            }
          }
        } catch (error) {
          console.error('üîê AuthProvider: SupabaseË™çË®º„Ç®„É©„Éº:', error)
          // „Ç®„É©„Éº„ÅÆÂ†¥Âêà„ÅØ„É≠„Éº„Ç´„É´Ë™çË®º„Å´„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ
          setAuthMethod('local')
        }
      } else {
        setAuthMethod('local')
        console.log('üîê AuthProvider: „É≠„Éº„Ç´„É´„Çπ„Éà„É¨„Éº„Ç∏Ë™çË®º„Çí‰ΩøÁî®')
      }

      // „É≠„Éº„Ç´„É´„Çπ„Éà„É¨„Éº„Ç∏„Åã„Çâ„ÅÆÂæ©ÂÖÉÔºà„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÔºâ
      try {
        const savedUser = localStorage.getItem('tokiwa_user')
        console.log('üîê AuthProvider: „É≠„Éº„Ç´„É´„Çπ„Éà„É¨„Éº„Ç∏„Åã„ÇâÂèñÂæó:', savedUser ? '„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„ÅÇ„Çä' : '„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„Å™„Åó')
        
        if (savedUser) {
          const parsedUser = JSON.parse(savedUser)
          console.log('üîê AuthProvider: „Éë„Éº„Çπ„Åï„Çå„Åü„É¶„Éº„Ç∂„Éº:', parsedUser)
          
          // Âü∫Êú¨ÁöÑ„Å™„Éê„É™„Éá„Éº„Ç∑„Éß„É≥
          if (parsedUser && parsedUser.id && parsedUser.guestName && parsedUser.schoolName) {
            console.log('üîê AuthProvider: „É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„ÇíË®≠ÂÆö')
            setUser(parsedUser)
            // „É≠„Éº„Ç´„É´„Çπ„Éà„É¨„Éº„Ç∏„Åã„ÇâÂæ©ÂÖÉ„Åó„ÅüÂ†¥Âêà„ÅØ„ÄÅË™çË®ºÊñπÊ≥ï„Çílocal„Å´Ë®≠ÂÆö
            if (authMethod === 'supabase') {
              console.log('üîê AuthProvider: „É≠„Éº„Ç´„É´„Çπ„Éà„É¨„Éº„Ç∏„Åã„ÇâÂæ©ÂÖÉ„ÄÅË™çË®ºÊñπÊ≥ï„Çílocal„Å´Â§âÊõ¥')
              setAuthMethod('local')
            }
          } else {
            console.warn('üîê AuthProvider: ÁÑ°Âäπ„Å™„É¶„Éº„Ç∂„Éº„Éá„Éº„Çø„ÄÅlocalStorage„Çí„ÇØ„É™„Ç¢')
            localStorage.removeItem('tokiwa_user')
          }
        }
      } catch (error) {
        console.error('üîê AuthProvider: „É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„ÅÆ„Éë„Éº„Çπ„Å´Â§±Êïó:', error)
        localStorage.removeItem('tokiwa_user')
      } finally {
        console.log('üîê AuthProvider: ÂàùÊúüÂåñÂÆå‰∫Ü„ÄÅisLoading„Çífalse„Å´Ë®≠ÂÆö')
        setIsLoading(false)
      }
    }

    // Â∞ë„ÅóÈÅÖÂª∂„ÇíÂÖ•„Çå„Å¶ÂàùÊúüÂåñÔºàÈñãÁô∫Áí∞Â¢É„Åß„ÅÆ„Å°„Çâ„Å§„Åç„ÇíÈò≤„ÅêÔºâ
    const timer = setTimeout(initializeAuth, 100)
    return () => clearTimeout(timer)
  }, [])

  // GameContext„ÅÆË™çË®ºÁä∂ÊÖã„Å®ÂêåÊúü
  useEffect(() => {
    console.log('üîê AuthProvider: GameContextÁä∂ÊÖã„ÇíÁõ£Ë¶ñ‰∏≠', {
      isMockMode: gameState.isMockMode,
      isAuthenticated: gameState.isAuthenticated,
      isLoading: gameState.isLoading,
      hasUser: !!gameState.user
    })
    
    if (gameState.isMockMode && gameState.isAuthenticated) {
      // „É¢„ÉÉ„ÇØ„É¢„Éº„Éâ„ÅåÊúâÂäπ„ÅßË™çË®ºÊ∏à„Åø„ÅÆÂ†¥Âêà
      console.log('üîê AuthProvider: GameContext„ÅÆ„É¢„ÉÉ„ÇØ„É¢„Éº„Éâ„Å®ÂêåÊúü')
      setUser({
        id: gameState.user?.id || 'mock-user',
        guestName: '„É¢„ÉÉ„ÇØ„É¶„Éº„Ç∂„Éº',
        schoolName: '„É¢„ÉÉ„ÇØÂ≠¶Ê†°',
        currentMoney: 50000,
        totalReputation: 0,
        uiTheme: 'gameboy_green',
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
      })
      setAuthMethod('local')
      setIsLoading(false)
    } else if (!gameState.isLoading && !gameState.isAuthenticated) {
      // Ë™çË®º„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑÂ†¥Âêà
      console.log('üîê AuthProvider: GameContext„ÅßÊú™Ë™çË®ºÁä∂ÊÖã„ÇíÊ§úÂá∫')
      setUser(null)
      setIsLoading(false)
    }
  }, [gameState.isMockMode, gameState.isAuthenticated, gameState.isLoading, gameState.user?.id])

  // ÂàùÊúüÂåñÂÆå‰∫ÜÂæå„ÅÆÁä∂ÊÖãÁ¢∫Ë™ç
  useEffect(() => {
    if (!isLoading && !user && !gameState.isMockMode) {
      // ÂàùÊúüÂåñÂÆå‰∫ÜÂæå„ÄÅ„É¶„Éº„Ç∂„Éº„Åå„Åä„Çâ„Åö„ÄÅ„É¢„ÉÉ„ÇØ„É¢„Éº„Éâ„Åß„ÇÇ„Å™„ÅÑÂ†¥Âêà
      console.log('üîê AuthProvider: ÂàùÊúüÂåñÂÆå‰∫Ü„ÄÅÊú™Ë™çË®ºÁä∂ÊÖã')
      setIsLoading(false)
    }
  }, [isLoading, user, gameState.isMockMode])

  // GameContext„ÅÆÁä∂ÊÖãÂ§âÊõ¥„Çí„Çà„ÇäÁ©çÊ•µÁöÑ„Å´Áõ£Ë¶ñ
  useEffect(() => {
    // „É¢„ÉÉ„ÇØ„É¢„Éº„Éâ„ÅåÊúâÂäπÂåñ„Åï„Çå„ÅüÂ†¥Âêà„ÅÆÂá¶ÁêÜ
    if (gameState.isMockMode && !user) {
      console.log('üîê AuthProvider: GameContext„Åß„É¢„ÉÉ„ÇØ„É¢„Éº„ÉâÊúâÂäπÂåñ„ÇíÊ§úÂá∫')
      setUser({
        id: 'mock-user',
        guestName: '„É¢„ÉÉ„ÇØ„É¶„Éº„Ç∂„Éº',
        schoolName: '„É¢„ÉÉ„ÇØÂ≠¶Ê†°',
        currentMoney: 50000,
        totalReputation: 0,
        uiTheme: 'gameboy_green',
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
      })
      setAuthMethod('local')
      setIsLoading(false)
    }
  }, [gameState.isMockMode, user?.id])

  // „É¢„ÉÉ„ÇØ„É¢„Éº„Éâ„ÅÆÁä∂ÊÖã„ÇíÁõ£Ë¶ñ„Åó„Å¶Ë™çË®ºÁä∂ÊÖã„ÇíÂêåÊúü
  useEffect(() => {
    if (gameState.isMockMode && gameState.isAuthenticated && gameState.user) {
      // GameContext„Åß„É¢„ÉÉ„ÇØ„É¢„Éº„Éâ„ÅåÊúâÂäπ„ÅßË™çË®ºÊ∏à„Åø„ÅÆÂ†¥Âêà
      if (!user || user.id !== gameState.user.id) {
        console.log('üîê AuthProvider: GameContext„ÅÆ„É¢„ÉÉ„ÇØ„É¢„Éº„ÉâÁä∂ÊÖã„Å®ÂêåÊúü')
        setUser({
          id: gameState.user.id || 'mock-user',
          guestName: '„É¢„ÉÉ„ÇØ„É¶„Éº„Ç∂„Éº',
          schoolName: '„É¢„ÉÉ„ÇØÂ≠¶Ê†°',
          currentMoney: 50000,
          totalReputation: 0,
          uiTheme: 'gameboy_green',
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString()
        })
        setAuthMethod('local')
        setIsLoading(false)
      }
    }
  }, [gameState.isMockMode, gameState.isAuthenticated, gameState.user?.id, user?.id])

  // authMethod„ÅÆÂ§âÊõ¥„Çí„É≠„Ç∞Âá∫Âäõ
  useEffect(() => {
    console.log('üîê AuthProvider: Ë™çË®ºÊñπÊ≥ï„ÅåÂ§âÊõ¥„Åï„Çå„Åæ„Åó„Åü:', authMethod)
  }, [authMethod])

  const login = async (guestName: string, schoolName: string) => {
    setIsLoading(true)
    try {
      // ‰ªÆ„ÅÆÂÆüË£Ö - Âæå„ÅßSupabaseË™çË®º„Å´ÁΩÆ„ÅçÊèõ„Åà
      const newUser: User = {
        id: `guest_${Date.now()}`,
        guestName,
        schoolName,
        currentMoney: 50000,
        totalReputation: 0,
        uiTheme: 'gameboy_green',
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
      }
      
      setUser(newUser)
      localStorage.setItem('tokiwa_user', JSON.stringify(newUser))
      
      // GameContext„ÅÆ„É¢„ÉÉ„ÇØ„É¢„Éº„Éâ„ÇíÊúâÂäπÂåñ
      if (gameActions) {
        gameActions.enableMockMode()
      }
    } catch (error) {
      console.error('Login failed:', error)
      throw error
    } finally {
      setIsLoading(false)
    }
  }

  const logout = () => {
    setUser(null)
    localStorage.removeItem('tokiwa_user')
    
    // GameContext„ÅÆ„É¢„ÉÉ„ÇØ„É¢„Éº„Éâ„ÇíÁÑ°ÂäπÂåñ
    if (gameActions) {
      gameActions.disableMockMode()
    }
  }

  return (
    <AuthContext.Provider 
      value={{ 
        user, 
        isLoading, 
        isAuthenticated: !!user, 
        login, 
        logout,
        authMethod
      }}
    >
      {children}
    </AuthContext.Provider>
  )
}

export function useAuth() {
  const context = useContext(AuthContext)
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider')
  }
  return context
}