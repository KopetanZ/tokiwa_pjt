'use client'

import { useState, useEffect } from 'react'
import { PixelCard } from '@/components/ui/PixelCard'
import { PixelButton } from '@/components/ui/PixelButton'
import { PixelProgressBar } from '@/components/ui/PixelProgressBar'
import { PixelInput } from '@/components/ui/PixelInput'
import { facilitySystem, Facility as FacilityType, UpgradeProject } from '@/lib/game-logic/facility-system'
import { formatMoney } from '@/lib/utils'
import { useGameData, useAuth, useNotifications } from '@/contexts/GameContext'
import { clsx } from 'clsx'

export default function FacilitiesPage() {
  const [selectedTab, setSelectedTab] = useState<'facilities' | 'upgrades' | 'overview' | 'research'>('overview')
  const [loading, setLoading] = useState(true)
  
  const { isMockMode } = useAuth()
  const gameData = useGameData()
  const { addNotification } = useNotifications()

  // Êñ∞„Åó„ÅÑÊñΩË®≠„Ç∑„Çπ„ÉÜ„É†„Çí‰ΩøÁî®
  const [facilities, setFacilities] = useState<FacilityType[]>([])
  const [upgradeProjects, setUpgradeProjects] = useState<UpgradeProject[]>([])
  const [researchProjects, setResearchProjects] = useState<any[]>([])
  const [facilityStatus, setFacilityStatus] = useState({
    total: 0,
    active: 0,
    upgrading: 0,
    averageLevel: 0,
    averageCondition: 0,
    monthlyMaintenanceCost: 0
  })

  useEffect(() => {
    loadFacilityData()
    const interval = setInterval(loadFacilityData, 5000) // 5ÁßíÊØé„Å´Êõ¥Êñ∞
    return () => clearInterval(interval)
  }, [])

  const loadFacilityData = async () => {
    try {
      const allFacilities = facilitySystem.getAllFacilities()
      const activeProjects = facilitySystem.getActiveProjects()
      const status = facilitySystem.getFacilityStatus()

      setFacilities(allFacilities)
      setUpgradeProjects(activeProjects)
      setFacilityStatus(status)
    } catch (error) {
      console.error('ÊñΩË®≠„Éá„Éº„Çø„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó:', error)
    } finally {
      setLoading(false)
    }
  }

  const handleUpgrade = async (facilityId: string) => {
    try {
      const result = await facilitySystem.startUpgrade(facilityId)
      if (result.success) {
        addNotification({
          type: 'success',
          message: result.message
        })
        loadFacilityData() // „Éá„Éº„ÇøÊõ¥Êñ∞
      } else {
        addNotification({
          type: 'error',
          message: result.message
        })
      }
    } catch (error) {
      addNotification({
        type: 'error',
        message: '„Ç¢„ÉÉ„Éó„Ç∞„É¨„Éº„Éâ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü'
      })
    }
  }

  const handleUnlockFacility = (facilityId: string) => {
    const success = facilitySystem.unlockFacility(facilityId)
    if (success) {
      addNotification({
        type: 'success',
        message: 'Êñ∞„Åó„ÅÑÊñΩË®≠„Åå„É≠„ÉÉ„ÇØËß£Èô§„Åï„Çå„Åæ„Åó„ÅüÔºÅ'
      })
      loadFacilityData()
    } else {
      addNotification({
        type: 'error',
        message: '„É≠„ÉÉ„ÇØËß£Èô§„ÅÆÊù°‰ª∂„ÇíÊ∫Ä„Åü„Åó„Å¶„ÅÑ„Åæ„Åõ„Çì'
      })
    }
  }

  const handleStartResearch = async (projectId: string) => {
    try {
      // Á†îÁ©∂ÈñãÂßã„ÅÆÂÆüË£Ö
      const researchCost = 5000 // Âü∫Êú¨Á†îÁ©∂Ë≤ª
      
      const { gameController } = await import('@/lib/game-logic')
      const canAfford = gameController.checkCanAfford(researchCost)
      
      if (!canAfford) {
        addNotification({
          type: 'error',
          message: `Ë≥áÈáë„Åå‰∏çË∂≥„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇÂøÖË¶Å: ‚ÇΩ${researchCost.toLocaleString()}`
        })
        return
      }
      
      const paymentResult = gameController.recordTransaction(
        'expense',
        'maintenance',
        researchCost,
        'ÊñΩË®≠Á†îÁ©∂Ë≤ª'
      )
      
      if (paymentResult) {
        addNotification({
          type: 'success',
          message: `Á†îÁ©∂„ÇíÈñãÂßã„Åó„Åæ„Åó„ÅüÔºÅÔºàË≤ªÁî®: ‚ÇΩ${researchCost.toLocaleString()}Ôºâ`
        })
        // ÂÆüÈöõ„ÅÆÁ†îÁ©∂„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÈñãÂßãÂá¶ÁêÜ„Çí„Åì„Åì„Å´ËøΩÂä†
      } else {
        addNotification({
          type: 'error',
          message: 'Á†îÁ©∂Ë≤ª„ÅÆÊîØÊâï„ÅÑ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü'
        })
      }
    } catch (error) {
      console.error('Á†îÁ©∂ÈñãÂßã„Ç®„É©„Éº:', error)
      addNotification({
        type: 'error',
        message: 'Á†îÁ©∂ÈñãÂßã„Å´Â§±Êïó„Åó„Åæ„Åó„Åü'
      })
    }
  }

  const handleCompleteUpgradeInstantly = async (projectId: string) => {
    const success = await facilitySystem.completeUpgradeInstantly(projectId)
    if (success) {
      addNotification({
        type: 'success',
        message: '„Ç¢„ÉÉ„Éó„Ç∞„É¨„Éº„Éâ„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„ÅüÔºÅ'
      })
      loadFacilityData()
    }
  }

  const getFacilityTypeIcon = (category: string) => {
    const icons = {
      training: 'üèãÔ∏è',
      research: 'üî¨',
      medical: 'üè•',
      storage: 'üì¶',
      accommodation: 'üè†',
      security: 'üõ°Ô∏è',
      utility: '‚öôÔ∏è'
    }
    return icons[category as keyof typeof icons] || 'üè¢'
  }

  const getStatusText = (facility: FacilityType) => {
    if (!facility.isUnlocked) return { text: '„É≠„ÉÉ„ÇØ‰∏≠', color: 'text-gray-600' }
    if (!facility.isActive) return { text: 'Êú™Âª∫Ë®≠', color: 'text-red-600' }
    if (facility.level === 0) return { text: 'Âª∫Ë®≠‰∏≠', color: 'text-yellow-600' }
    return { text: 'Á®ºÂÉç‰∏≠', color: 'text-green-600' }
  }

  const formatEffectValue = (value: number, type: string) => {
    const sign = value > 0 ? '+' : ''
    const suffix = type.includes('rate') || type.includes('bonus') ? '%' : ''
    return `${sign}${value}${suffix}`
  }

  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      {/* „Éò„ÉÉ„ÉÄ„Éº */}
      <div className="flex items-center justify-between">
        <h1 className="font-pixel-large text-retro-gb-dark">
          ÊñΩË®≠ÁÆ°ÁêÜ
        </h1>
        <div className="flex space-x-2">
          <PixelButton size="sm" variant="secondary">
            ÊñΩË®≠„É¨„Éù„Éº„Éà
          </PixelButton>
          <PixelButton>
            Êñ∞Ë¶èÂª∫Ë®≠
          </PixelButton>
        </div>
      </div>

      {/* Áµ±Ë®àÊ¶ÇË¶Å */}
      <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
        <PixelCard title="Á®ºÂÉçÊñΩË®≠">
          <div className="text-center">
            <div className="font-pixel-large text-green-600">{facilityStatus.active}</div>
            <div className="font-pixel text-xs text-retro-gb-mid">/ {facilityStatus.total} ÊñΩË®≠</div>
          </div>
        </PixelCard>

        <PixelCard title="„Ç¢„ÉÉ„Éó„Ç∞„É¨„Éº„Éâ‰∏≠">
          <div className="text-center">
            <div className="font-pixel-large text-orange-600">{facilityStatus.upgrading}</div>
            <div className="font-pixel text-xs text-retro-gb-mid">„Éó„É≠„Ç∏„Çß„ÇØ„Éà</div>
          </div>
        </PixelCard>

        <PixelCard title="Âπ≥Âùá„É¨„Éô„É´">
          <div className="text-center">
            <div className="font-pixel-large text-blue-600">
              {facilityStatus.averageLevel}
            </div>
            <div className="font-pixel text-xs text-retro-gb-mid">ÂÖ®ÊñΩË®≠Âπ≥Âùá</div>
          </div>
        </PixelCard>

        <PixelCard title="Âπ≥Âùá„Ç≥„É≥„Éá„Ç£„Ç∑„Éß„É≥">
          <div className="text-center">
            <div className="font-pixel-large text-purple-600">
              {facilityStatus.averageCondition}%
            </div>
            <div className="font-pixel text-xs text-retro-gb-mid">„É°„É≥„ÉÜ„Éä„É≥„ÇπÁä∂Ê≥Å</div>
          </div>
        </PixelCard>

        <PixelCard title="ÊúàÊ¨°Á∂≠ÊåÅË≤ª">
          <div className="text-center">
            <div className="font-pixel-large text-red-600">
              ¬•{facilityStatus.monthlyMaintenanceCost.toLocaleString()}
            </div>
            <div className="font-pixel text-xs text-retro-gb-mid">ÊØéÊúàÊîØÊâï„ÅÑ</div>
          </div>
        </PixelCard>
      </div>

      {/* „Çø„Éñ„Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥ */}
      <PixelCard>
        <div className="flex space-x-2">
          {[
            { key: 'overview', label: 'Ê¶ÇË¶Å' },
            { key: 'facilities', label: 'ÊñΩË®≠‰∏ÄË¶ß' },
            { key: 'upgrades', label: '„Ç¢„ÉÉ„Éó„Ç∞„É¨„Éº„Éâ' }
          ].map(tab => (
            <PixelButton
              key={tab.key}
              size="sm"
              variant={selectedTab === tab.key ? 'primary' : 'secondary'}
              onClick={() => setSelectedTab(tab.key as any)}
            >
              {tab.label}
            </PixelButton>
          ))}
        </div>
      </PixelCard>

      {/* Ê¶ÇË¶Å„Çø„Éñ */}
      {selectedTab === 'overview' && (
        <div className="space-y-6">
          {/* „Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Ç¢„ÉÉ„Éó„Ç∞„É¨„Éº„Éâ */}
          {upgradeProjects.length > 0 && (
            <PixelCard title="ÈÄ≤Ë°å‰∏≠„ÅÆ„Ç¢„ÉÉ„Éó„Ç∞„É¨„Éº„Éâ">
              <div className="space-y-3">
                {upgradeProjects.map(project => {
                  const facility = facilities.find(f => f.id === project.facilityId)
                  const startTime = new Date(project.startTime).getTime()
                  const endTime = new Date(project.completionTime).getTime()
                  const now = Date.now()
                  const progress = Math.min(100, ((now - startTime) / (endTime - startTime)) * 100)
                  const timeRemaining = Math.max(0, endTime - now)
                  const hoursRemaining = Math.floor(timeRemaining / (60 * 60 * 1000))
                  const minutesRemaining = Math.floor((timeRemaining % (60 * 60 * 1000)) / (60 * 1000))

                  return (
                    <div key={project.id} className="border border-retro-gb-mid p-3">
                      <div className="flex justify-between items-start mb-2">
                        <div>
                          <div className="font-pixel text-sm text-retro-gb-dark">
                            {facility?.name} Lv.{facility?.level} ‚Üí {project.newLevel}
                          </div>
                          <div className="font-pixel text-xs text-retro-gb-mid">
                            ÊÆã„ÇäÊôÇÈñì: {hoursRemaining}ÊôÇÈñì{minutesRemaining}ÂàÜ
                          </div>
                        </div>
                        <div className="flex items-center gap-2">
                          <div className="font-pixel text-xs text-retro-gb-dark">
                            {progress.toFixed(1)}%
                          </div>
                          <PixelButton
                            size="sm"
                            onClick={() => handleCompleteUpgradeInstantly(project.id)}
                          >
                            Âç≥Â∫ßÂÆå‰∫Ü
                          </PixelButton>
                        </div>
                      </div>
                      <PixelProgressBar
                        value={progress}
                        max={100}
                        color="exp"
                        showLabel={false}
                      />
                    </div>
                  )
                })}
              </div>
            </PixelCard>
          )}

          {/* ÈÄ≤Ë°å‰∏≠„ÅÆÁ†îÁ©∂ */}
          {researchProjects.filter(p => p.status === 'researching').length > 0 && (
            <PixelCard title="ÈÄ≤Ë°å‰∏≠„ÅÆÁ†îÁ©∂">
              <div className="space-y-3">
                {researchProjects
                  .filter(p => p.status === 'researching')
                  .map(project => (
                    <div key={project.id} className="border border-retro-gb-mid p-3">
                      <div className="flex justify-between items-start mb-2">
                        <div>
                          <div className="font-pixel text-sm text-retro-gb-dark">
                            {project.nameJa}
                          </div>
                          <div className="font-pixel text-xs text-retro-gb-mid">
                            {project.effects.description}
                          </div>
                        </div>
                        <div className="font-pixel text-xs text-retro-gb-dark">
                          {((project.researchPoints / project.maxResearchPoints) * 100).toFixed(1)}%
                        </div>
                      </div>
                      <PixelProgressBar
                        value={project.researchPoints}
                        max={project.maxResearchPoints}
                        color="progress"
                        showLabel={false}
                      />
                    </div>
                  ))}
              </div>
            </PixelCard>
          )}

          {/* ÊñΩË®≠ÂäπÁéá„É©„É≥„Ç≠„É≥„Ç∞ */}
          <PixelCard title="ÊñΩË®≠ÂäπÁéá„É©„É≥„Ç≠„É≥„Ç∞">
            <div className="space-y-2">
              {facilities
                .filter(f => f.level > 0)
                .sort((a, b) => b.level - a.level)
                .slice(0, 5)
                .map((facility, index) => (
                  <div key={facility.id} className="flex justify-between items-center py-2 border-b border-retro-gb-mid last:border-b-0">
                    <div className="flex items-center space-x-2">
                      <span className="font-pixel text-sm text-retro-gb-mid">#{index + 1}</span>
                      <span className="text-lg">{getFacilityTypeIcon(facility.category)}</span>
                      <span className="font-pixel text-sm text-retro-gb-dark">{facility.name}</span>
                    </div>
                    <div className="text-right">
                      <div className="font-pixel text-sm text-blue-600">{facility.level}x</div>
                      <div className="font-pixel text-xs text-retro-gb-mid">Lv.{facility.level}</div>
                    </div>
                  </div>
                ))}
            </div>
          </PixelCard>
        </div>
      )}

      {/* ÊñΩË®≠‰∏ÄË¶ß„Çø„Éñ */}
      {selectedTab === 'facilities' && (
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
          {facilities.map(facility => (
            <PixelCard key={facility.id}>
              <div className="space-y-4">
                {/* „Éò„ÉÉ„ÉÄ„Éº */}
                <div className="flex items-start justify-between">
                  <div className="flex items-center space-x-2">
                    <span className="text-2xl">{getFacilityTypeIcon(facility.category)}</span>
                    <div>
                      <h3 className="font-pixel text-lg text-retro-gb-dark">
                        {facility.name}
                      </h3>
                      <div className="flex items-center space-x-2">
                        <span className="font-pixel text-sm text-retro-gb-mid">
                          Lv.{facility.level}/10
                        </span>
                        <span className="font-pixel text-xs text-green-600">
                          {facility.level > 0 ? 'Á®ºÂÉç‰∏≠' : 'ÂÅúÊ≠¢‰∏≠'}
                        </span>
                      </div>
                    </div>
                  </div>
                  <div className="text-right">
                    <div className="font-pixel text-sm text-blue-600">
                      {(facility.level * 0.2 + 1).toFixed(1)}x
                    </div>
                    <div className="font-pixel text-xs text-retro-gb-mid">ÂäπÁéá</div>
                  </div>
                </div>

                {/* ‰ΩøÁî®Áéá */}
                <div>
                  <div className="flex justify-between mb-1">
                    <span className="font-pixel text-xs text-retro-gb-mid">‰ΩøÁî®Áéá</span>
                    <span className="font-pixel text-xs text-retro-gb-dark">
{Math.floor(facility.level * 20)}/{facility.level * 50}
                    </span>
                  </div>
                  <PixelProgressBar
                    value={Math.floor(facility.level * 20)}
                    max={facility.level * 50}
                    color={facility.level > 5 ? 'hp' : 'progress'}
                    showLabel={false}
                  />
                </div>

                {/* Ë™¨Êòé */}
                <p className="font-pixel text-xs text-retro-gb-mid leading-relaxed">
                  {facility.description}
                </p>

                {/* ÂäπÊûú */}
                <div>
                  <div className="font-pixel text-xs text-retro-gb-mid mb-1">ÂäπÊûú:</div>
                  <div className="space-y-1">
                    <div className="font-pixel text-xs text-green-600">
                      ÂäπÁéá +{(facility.level * 10)}%
                    </div>
                  </div>
                </div>

                {/* Á∂≠ÊåÅË≤ª */}
                <div className="flex justify-between items-center pt-2 border-t border-retro-gb-mid">
                  <span className="font-pixel text-xs text-retro-gb-mid">
                    ÊúàÊ¨°Á∂≠ÊåÅË≤ª: {formatMoney(facility.maintenanceCost)}
                  </span>
                  <div className="flex space-x-2">
                    {facility.level > 0 && facility.level < 10 && (
                      <PixelButton
                        size="sm"
                        onClick={() => handleUpgrade(facility.id)}
                      >
                        „Ç¢„ÉÉ„Éó„Ç∞„É¨„Éº„Éâ
                        <br />
                        {formatMoney(facility.upgradeCost * Math.pow(1.5, facility.level))}
                      </PixelButton>
                    )}
                    {facility.level === 0 && (
                      <PixelButton size="sm" variant="secondary">
                        Âª∫Ë®≠ÈñãÂßã
                      </PixelButton>
                    )}
                  </div>
                </div>
              </div>
            </PixelCard>
          ))}
        </div>
      )}

      {/* „Ç¢„ÉÉ„Éó„Ç∞„É¨„Éº„Éâ„Çø„Éñ */}
      {selectedTab === 'upgrades' && (
        <div className="space-y-4">
          <PixelCard title="„Ç¢„ÉÉ„Éó„Ç∞„É¨„Éº„ÉâË®àÁîª">
            <div className="space-y-4">
              {facilities
                .filter(f => f.level < 10 && f.level > 0)
                .map(facility => (
                  <div key={facility.id} className="border border-retro-gb-mid p-4">
                    <div className="flex justify-between items-start">
                      <div className="flex-1">
                        <div className="flex items-center space-x-2 mb-2">
                          <span className="text-lg">{getFacilityTypeIcon(facility.category)}</span>
                          <div>
                            <div className="font-pixel text-sm text-retro-gb-dark">
                              {facility.name}
                            </div>
                            <div className="font-pixel text-xs text-retro-gb-mid">
                              Lv.{facility.level} ‚Üí {facility.level + 1}
                            </div>
                          </div>
                        </div>
                        
                        <div className="space-y-2">
                          <div className="font-pixel text-xs text-retro-gb-mid">
                            Ë≤ªÁî®: {formatMoney(facility.upgradeCost * Math.pow(1.5, facility.level))}
                          </div>
                          <div className="font-pixel text-xs text-retro-gb-mid">
                            Â∑•Êúü: {Math.floor(facility.constructionTime / 60)}ÊôÇÈñì
                          </div>
                          <div className="font-pixel text-xs text-retro-gb-mid">
                            ÊùêÊñô: Âü∫Êú¨Ë≥áÊùê
                          </div>
                        </div>
                      </div>
                      
                      <PixelButton
                        onClick={() => handleUpgrade(facility.id)}
                        disabled={false}
                      >
                        ÈñãÂßã
                      </PixelButton>
                    </div>
                  </div>
                ))}
            </div>
          </PixelCard>
        </div>
      )}

      {/* Á†îÁ©∂ÈñãÁô∫„Çø„Éñ */}
      {selectedTab === 'research' && (
        <div className="space-y-4">
          <PixelCard title="Á†îÁ©∂„Éó„É≠„Ç∏„Çß„ÇØ„Éà">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
              {researchProjects.map(project => (
                <div key={project.id} className="border border-retro-gb-mid p-4">
                  <div className="space-y-3">
                    <div className="flex justify-between items-start">
                      <div>
                        <h3 className="font-pixel text-sm text-retro-gb-dark">
                          {project.nameJa}
                        </h3>
                        <span className="font-pixel text-xs text-green-600">
                          Á†îÁ©∂ÂèØËÉΩ
                        </span>
                      </div>
                      <div className="text-right">
                        <div className="font-pixel text-xs text-retro-gb-mid">
                          {project.category}
                        </div>
                      </div>
                    </div>

                    <p className="font-pixel text-xs text-retro-gb-mid leading-relaxed">
                      {project.effects.description}
                    </p>

                    {project.status === 'researching' && (
                      <div>
                        <div className="flex justify-between mb-1">
                          <span className="font-pixel text-xs text-retro-gb-mid">ÈÄ≤Êçó</span>
                          <span className="font-pixel text-xs text-retro-gb-dark">
                            {project.researchPoints}/{project.maxResearchPoints}
                          </span>
                        </div>
                        <PixelProgressBar
                          value={project.researchPoints}
                          max={project.maxResearchPoints}
                          color="progress"
                          showLabel={false}
                        />
                      </div>
                    )}

                    <div className="space-y-1 font-pixel text-xs text-retro-gb-mid">
                      <div>Ë≤ªÁî®: {formatMoney(project.cost)}</div>
                      <div>ÊúüÈñì: {project.duration}Êó•</div>
                      <div>Á†îÁ©∂ËÄÖ: {project.researchers}Âêç</div>
                    </div>

                    {project.prerequisites && project.prerequisites.length > 0 && (
                      <div className="font-pixel text-xs text-orange-600">
                        ÂâçÊèêÁ†îÁ©∂: {project.prerequisites.join(', ')}
                      </div>
                    )}

                    {project.status === 'available' && (
                      <PixelButton
                        size="sm"
                        onClick={() => handleStartResearch(project.id)}
                        className="w-full"
                      >
                        Á†îÁ©∂ÈñãÂßã
                      </PixelButton>
                    )}
                  </div>
                </div>
              ))}
            </div>
          </PixelCard>
        </div>
      )}
    </div>
  )
}